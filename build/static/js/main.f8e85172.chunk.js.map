{"version":3,"sources":["utils/storage.js","utils/network.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["key","getData","a","get","json","data","JSON","parse","setData","stringify","set","Error","console","log","updateStatus","event","navigator","onLine","alert","App","useState","array","setArray","useEffect","window","addEventListener","className","map","arr","index","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f8e85172.chunk.js","sourcesContent":["import { set, get } from 'idb-keyval';\n\nconst key = 'temporary@storage'\n\nexport async function getData() {\n  const json = await get(key)\n  const data = json ? JSON.parse(json) : []\n  return data\n}\n\nexport async function setData(data) {\n\n\n\n  if(data) {\n    const json = JSON.stringify(data)\n\n    try {\n      await set(key, json)\n\n    } catch (err) {\n      throw Error('Dado inválido')\n\n    } finally { \n      console.log('Done')\n    }\n  }\n}\n\nexport async function insertRow(content) {\n  if (content) {\n    const data = await getData()\n    return await setData([\n      ...data,\n      content\n    ])\n  } else {\n    throw Error('Dado inválido')\n  }\n}\n\n","function updateStatus (event) {\n  if (navigator.onLine) {\n    alert('You are online')\n  } else {\n    alert('Yout are offline')\n  }\n}\n\nexport function networkStatus() {\n  window.addEventListener('online', updateStatus);\n  window.addEventListener('offline', updateStatus);\n}","//import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react'\nimport { getData, setData } from './utils/storage'\nimport { networkStatus } from './utils/network'\n\nimport './styles/index.scss'\n\nfunction App() {\n\n  const [array, setArray] = useState(null)\n\n  async function addItem() {\n    let newData = 'Eu sou uma batata'\n\n    setArray([\n      ...array,\n      newData\n    ])\n  }\n\n  useEffect(() => {\n\n    ;(async () => {\n      await setData(array)\n    })();\n    \n  }, [array])\n\n  \n  useEffect(() => {\n    ;(async () => {\n      networkStatus()\n\n      let data = await getData()\n      setArray(data)\n    })()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <main>\n        <h2> PWA Validator </h2>\n\n        <ul>\n          {\n            array && array.map((arr, index) => (\n              <li key={index}> {arr} </li>\n            ))\n          }\n        </ul>\n\n        <button \n          onClick={addItem}\n        >\n          Batata\n        </button>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}